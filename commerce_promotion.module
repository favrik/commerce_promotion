<?php

/**
 * Implements hook_menu().
 */
function commerce_promotion_menu() {
  $items = array();

  $common_settings = array(
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/commerce_promotion.admin.inc',
  );

  $items['admin/commerce/promotions'] = array(
    'title' => 'Promotions',
    'page callback' => 'commerce_promotion_list_page',
  ) + $common_settings;

  $items['admin/commerce/promotions/add'] = array(
    'title' => 'Add Promotion',
    'page callback' => 'commerce_promotion_get_form',
    'page arguments' => array(),
  ) + $common_settings;

  $items['admin/commerce/promotions/edit/%'] = array(
    'title' => 'Edit Promotion',
    'page callback' => 'commerce_promotion_get_form',
    'page arguments' => array(4),
  ) + $common_settings;

  $items['admin/commerce/promotions/delete/%'] = array(
    'title' => 'Delete Promotion',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_promotion_delete_form', 4),
  ) + $common_settings;

  $items['admin/commerce/promotions/user-autocomplete'] = array(
    'title' => 'Multiple User Autocomplete',
    'page callback' => 'commerce_promotion_user_autocomplete',
    'type' => MENU_CALLBACK,
  ) + $common_settings;

  // Remove coupon from order.
  $items['commerce/promotions/order/remove/%/%commerce_order'] = array(
    'title' => 'Delete coupon from order',
    'page callback' => 'commerce_promotion_remove_code_from_order_callback',
    'page arguments' => array(4, 5),
    'access arguments' => array('access checkout'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function commerce_promotion_entity_info() {
  $items['commerce_promotion'] = array(
    'label' => t('Commerce Promotion'),
    'label callback' => 'commerce_promotion_label',
    'base table' => 'commerce_promotion',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'commerce_promotion_id',
      'name' => 'name',
      'label' => 'name',
    ),
    'access callback' => 'commerce_promotion_access',
    'module' => 'commerce_promotion',
    'redirect' => FALSE,
    'metadata controller class' => 'CommercePromotionMetadataController',
  );

  return $items;
}

function commerce_promotion_label($entity, $entity_type) {
  return t('@number', array('@number' => $entity->name));
}

/**
 * Access callback for commerce_promotion entities.
 */
function commerce_promotion_access($op, $entity, $account, $entity_type) {
  return user_access('administer commerce promotions', $account);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_promotion_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/products/add' on 'admin/commerce/products'.
  if ($root_path == 'admin/commerce/promotions') {
    $item = menu_get_item('admin/commerce/promotions/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/*
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_promotion_commerce_checkout_pane_info() {
  $panes['commerce_promotion'] = array(
    'title' => t('Promotions'),
    'file' => 'includes/commerce_promotion.checkout_pane.inc',
    'base' => 'commerce_promotion_pane',
    'page' => 'checkout',
    'fieldset' => TRUE,
    'locked' => FALSE,
  );

  return $panes;
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_promotion_commerce_line_item_type_info() {
  return array(
    'commerce_promotion' => array(
      'type' => 'commerce_promotion',
      'name' => t('Fixed amount discount'),
      'description' => t('Line item for fixed amounts.'),
      'add_form_submit_value' => t('Add Discount'),
      'base' => 'commerce_promotion_line_item',
    ),
  );
}

/**
 * Determine the discount's line item title.
 *
 * @return
 *   The line item title.
 */
function commerce_promotion_line_item_title() {
  return t('Fixed amount discount');
}

/**
 * Implements hook_commerce_cart_order_refresh().
 */
function commerce_promotion_commerce_cart_order_refresh($wrapper) {
  $line_items_to_delete = array();
  $cloned_line_items = array();

  commerce_promotion_remove_price_components($wrapper->commerce_order_total);

  foreach ($wrapper->commerce_line_items as $delta => $wrapper_line_item) {
    $cloned_line_items[$wrapper_line_item->getIdentifier()] = clone($wrapper_line_item->value());
    commerce_promotion_remove_price_components($wrapper_line_item->commerce_unit_price);
    commerce_promotion_remove_price_components($wrapper_line_item->commerce_total);
  }

  // Save the line items which have changes after removing/re-adding discounts;
  // except if one of our discount type line items still has price 0, delete it.
  foreach ($wrapper->commerce_line_items as $delta => $wrapper_line_item) {
    $id = $wrapper_line_item->getIdentifier();

    // Only check non-new line items; new ones have already been saved.
    if (isset($cloned_line_items[$id])) {
      if ($wrapper_line_item->getBundle() == 'commerce_promotion' && $wrapper_line_item->commerce_unit_price->amount->value() == 0) {
        $line_items_to_delete[] = $id;
        $wrapper->commerce_line_items->offsetUnset($delta);
      }
      else {
        // Check for changes, in commerce_unit_price (in the same way as
        // commerce_cart_order_refresh() does) and quantity.
        // (Don't check e.g. commerce_total; it may not be updated yet.)
        $old_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $cloned_line_items[$id]);
        $old_data = $old_line_item_wrapper->commerce_unit_price->data->value() + array('components' => array());
        $data = (array) $wrapper_line_item->commerce_unit_price->data->value() + array('components' => array());

        if ($wrapper_line_item->commerce_unit_price->amount->value() != $old_line_item_wrapper->commerce_unit_price->amount->value() ||
          $wrapper_line_item->commerce_unit_price->currency_code->value() != $old_line_item_wrapper->commerce_unit_price->currency_code->value() ||
          $data['components'] != $old_data['components']) {
          // Save changed line item (which will correctly set commerce_total).
          $wrapper_line_item->save();
        }
      }
    }
  }

  // Delete line items.
  commerce_line_item_delete_multiple($line_items_to_delete);

  // Re-add all applicable promotion price components and/or line items.
  commerce_promotion_apply_promotion($wrapper->value());
}

/**
 *
 */
function commerce_promotion_remove_price_components($price_wrapper) {
  $data = $price_wrapper->data->value();
  $component_removed = FALSE;
  // Remove price components belonging to order discounts.
  foreach ($data['components'] as $key => $component) {
    if (empty($component['price']['data']['promotion_id'])) {
      continue;
    }
    unset($data['components'][$key]);
    $component_removed = TRUE;
  }

  // Don't alter the price components if no components were removed.
  if (!$component_removed) {
    return;
  }

  // Re-save the price without the discounts (if existed).
  $price_wrapper->data->set($data);

  // Re-set the total price.
  $total = commerce_price_component_total($price_wrapper->value());
  $price_wrapper->amount->set($total['amount']);
}

/**
 * Page callback: delete a promotion from an order.
 */
function commerce_promotion_remove_code_from_order_callback($promotion_id, $order) {
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], 'commerce_coupon_remove_checkout:' . $promotion_id . ':' . $order->order_id) || !commerce_checkout_access($order)) {
    return MENU_ACCESS_DENIED;
  }

  commerce_promotion_remove_code_from_order($order, $promotion_id);
  drupal_set_message(t('Coupon removed from order'));
  drupal_goto();
}

function commerce_promotion_remove_code_from_order($order, $promotion_id, $save = TRUE) {
  $original_order = clone $order;
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Remove the coupons from the order relationship.
  foreach ($order_wrapper->field_commerce_promotions as $delta => $promotion_wrapper) {
    $promotion = $promotion_wrapper->value();
    if ($promotion_id == $promotion->commerce_promotion_id) {
      $order_wrapper->field_commerce_promotions->offsetUnset($delta);
      $order_wrapper->field_commerce_promotion_code->set('');
    }
  }

/* This seems to be handled by cart_refresh but not sure if on all situations.
  foreach ($order_wrapper->commerce_line_items as $delta => $line_wrapper) {
    if ($line_wrapper->getBundle() == 'commerce_promotion') {
      $line_item = $line_item_wrapper->value();
      if (isset($line_item->data['commerce_promotion'])) {
        if ($line_item['data']['commerce_promotion']['commerce_promotion_id'] == $promotion_id) {
          $order_wrapper->commerce_line_items->offsetUnset()
        }
      }
    }
  }
*/
  if ($original_order <> $order && $save) {
    commerce_order_save($order);
  }
}

/**
 * Load balalaika.
 */
function commerce_promotion_balalaika_autoloader() {
  $loader = require './' . drupal_get_path('module', 'commerce_promotion') . '/balalaika/vendor/autoload.php';
  return $loader;
}

/**
 * Get promotion builder.
 */
function commerce_promotion_get_builder() {
  commerce_promotion_balalaika_autoloader();
  $result = &drupal_static(__FUNCTION__);
  if (!isset($result)) {
    $builder = new \Balalaika\Builder\ArrayBuilder();
    $result = $builder;
  }

  return $result;
}

/**
 * Create a promotion data structure populated with passed $values.
 */
function commerce_promotion_defaults(array $values = array()) {
  $values += array(
    'commerce_promotion_id' => NULL,
    'name' => '',
    'status' => TRUE,
    'start' => NULL,
    'end' => NULL,
    'usage_limit_per_code' => 0,
    'usage_limit_per_user' => 1,
    'code' => '',
    // This is metadata
    'has_code' => 0,
    'code_type' => 'simple',
    'bulk_length' => 8,
    'date' => 0,
  );

  return $values;
}

/**
 * Save a promotion from form values.
 */
function commerce_promotion_save(array $values) {
  $values = commerce_promotion_defaults($values);

  $primary_key = is_null($values['commerce_promotion_id']) ? array() : 'commerce_promotion_id';
  $promotion_keys = array('commerce_promotion_id', 'name', 'status');

  if (isset($values['date']) && $values['date']) {
    array_push($promotion_keys, 'start', 'end');
  }

  $promotion = array();
  foreach ($promotion_keys as $key) {
    $promotion[$key] = $values[$key];
  }
  drupal_write_record('commerce_promotion', $promotion, $primary_key);

  $promotion_id = $promotion['commerce_promotion_id'];

  if (!empty($values['rules_values'])) {
    commerce_promotion_save_rules($promotion_id, $values['rules_values']);
  }

  if (!empty($values['actions_values'])) {
    commerce_promotion_save_actions($promotion_id, $values['actions_values']);
  }

  if (isset($values['code']) && $values['code'] && $values['code_type'] == 'simple') {
    commerce_promotion_save_simple_code($promotion_id, $values);
  }

  return $promotion_id;
}

/**
 * Save/Update rules using delete -> re-insert.
 */
function commerce_promotion_save_rules($promotion_id, $rules) {
  db_delete('commerce_promotion_rules')->condition('commerce_promotion_id', $promotion_id)->execute();

  $row['commerce_promotion_id'] = $promotion_id;

  foreach ($rules as $rule) {
    $rule_name = key($rule);
    $config = array_shift($rule);

    $row['rule'] = $rule_name;
    $row['operator'] = $config['operator'];
    $row['value'] = isset($config['field']) ? commerce_promotion_value_parser($rule_name, $config['field']) : NULL;

    commerce_promotion_save_rule($row);
  }
}

function commerce_promotion_save_rule($rule) {
  db_insert('commerce_promotion_rules')->fields($rule)->execute();
}

/**
 * Save/Update actions using delete -> re-insert.
 */
function commerce_promotion_save_actions($promotion_id, $actions) {
  db_delete('commerce_promotion_actions')->condition('commerce_promotion_id', $promotion_id)->execute();

  $row['commerce_promotion_id'] = $promotion_id;

  foreach ($actions as $action) {
    $action_name = key($action);
    $config = array_shift($action);

    $row['action'] = $action_name;
    $row['argument'] = isset($config['field']) ? commerce_promotion_value_parser($action_name, $config['field']) : NULL;

    commerce_promotion_save_action($row);
  }
}

function commerce_promotion_save_action($action) {
  db_insert('commerce_promotion_actions')->fields($action)->execute();
}

/**
 * Returns a formatted value for an action or rule according to its preference.
 */
function commerce_promotion_value_parser($rule_name, $value) {
  switch ($rule_name) {
    case 'order_total':
    case 'discount_fixed_amount':
      return intval($value) * 100;
  }

  return $value;
}

/**
 * Save simple promotion code (non-bulk).
 */
function commerce_promotion_save_simple_code($promotion_id, $values) {
  db_delete('commerce_promotion_codes')->condition('commerce_promotion_id', $promotion_id)->execute();
  $code = array(
    'commerce_promotion_id' => $promotion_id,
    'code' => $values['simple_code'],
    'usage_limit_per_code' => $values['usage_limit_per_code'],
    'usage_limit_per_user' => $values['usage_limit_per_user'],
    'bulk' => 0,
  );

  commerce_promotion_save_code($code);
}

function commerce_promotion_save_code($code) {
  db_insert('commerce_promotion_codes')->fields($code)->execute();
}

/**
 * Generate a promotion code from parameters.
 */
function commerce_promotion_generate_code($params) {
  $id = str_pad(dechex($params['id']), strlen(dechex($params['number'])), '0', STR_PAD_LEFT);
  $length = strlen($params['prefix']) + $params['length'];
  return strtoupper(substr($params['prefix'] . $id . md5($params['seed'] . $id), 0, $length));
}

function commerce_promotion_get_all() {
  $select = db_select('commerce_promotion', 'p')->extend('PagerDefault');
  $select
    ->fields('p')
    ->limit(25)
    ->orderBy('commerce_promotion_id', 'ASC');

  return $select->execute();
}

function commerce_promotion_load_one_code($promotion_id) {
  $select = db_select('commerce_promotion_codes', 'c')->extend('PagerDefault');
  $select->fields('c')
         ->condition('commerce_promotion_id', $promotion_id, '=');
  $select->limit(1);

  return $select->execute()->fetchAssoc();
}

function commerce_promotion_delete_all() {
  db_delete('commerce_promotion_codes')->execute();
  db_delete('commerce_promotion_actions')->execute();
  db_delete('commerce_promotion_rules')->execute();
}

function commerce_promotion_load($promotion_id) {
  $promotion = db_select('commerce_promotion', 'p')
    ->fields('p')
    ->condition('commerce_promotion_id', $promotion_id)
    ->execute()
    ->fetchAssoc();

  if ($promotion) {
    $promotion = commerce_promotion_defaults($promotion);
    $promotion['actions'] = commerce_promotion_load_actions($promotion_id);
    $promotion['rules'] = commerce_promotion_load_rules($promotion_id);

    if ($promotion['start'] || $promotion['end']) {
      $promotion['date'] = TRUE;
    }

    $code = commerce_promotion_load_one_code($promotion_id);
    if ($code) {
      $promotion['has_code'] = TRUE;
      $promotion['code_type'] = $code['bulk'] ? 'bulk' : 'simple';
      $promotion['code'] = $code['code'];
      $promotion['usage_limit_per_code'] = $code['usage_limit_per_code'];
      $promotion['usage_limit_per_user'] = $code['usage_limit_per_user'];
    }
  }

  return $promotion;
}

function commerce_promotion_load_rules($promotion_id) {
  $result = db_select('commerce_promotion_rules', 'r')
    ->fields('r', array('rule', 'operator', 'value'))
    ->condition('commerce_promotion_id', $promotion_id)
    ->execute();

  $rules = array();
  foreach ($result as $rule) {
    $rules[$rule->rule] = (array) $rule;
  }

  return $rules;
}

function commerce_promotion_load_actions($promotion_id) {
  $result = db_select('commerce_promotion_actions', 'a')
    ->fields('a', array('action', 'argument'))
    ->condition('commerce_promotion_id', $promotion_id)
    ->execute();

  $actions = array();
  foreach ($result as $action) {
    $actions[$action->action] = (array) $action;
  }

  return $actions;
}

/**
 * Find an active promotion by code.
 */
function commerce_promotion_find_by_code($code) {
  $result = db_query('
    SELECT commerce_promotion_id, code_id, code
    FROM commerce_promotion_codes c
    WHERE c.code = :code', array(':code' => $code)
  )->fetchAssoc();

  if ($result) {
    $data = commerce_promotion_load($result['commerce_promotion_id']);
    $data['submitted_code'] = $code;
    $data['submitted_code_id'] = $result['code_id'];

    return $data;
  }

  return NULL;
}

/**
 * Try to apply a promotion code.
 */
function commerce_promotion_apply_code($code, $order) {
  $result = array(
    'success' => FALSE,
    'error' => '',
  );

  $promotion_data = commerce_promotion_find_by_code($code);

  if ($promotion_data) {
    $promotion = commerce_promotion_get_balalaika_promotion($promotion_data);
    $subject = commerce_promotion_get_subject($order, $promotion_data);
    if ($promotion->isEligible($subject)) {
      $subject->savePromotionReference();
      $result['success'] = TRUE;
    } else {
      $result['error'] = t('Unable to redeem coupon.');
    }

    return $result;
  }

  $result['error'] = empty($code) ? t('Please enter a code.') : t('Your coupon code is not valid.');

  return $result;
}

function commerce_promotion_apply_promotion($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $code = $order_wrapper->field_commerce_promotion_code->value();
  $promotion_id = FALSE;
  // Only take the first promotion, currently orders can only have 1 promotion applied.
  $promotions = $order_wrapper->field_commerce_promotions->value();
  if (isset($promotions[0])) {
    $promotion_id = $promotions[0]->commerce_promotion_id;
  }

  if ($promotion_id && $code) {
    $promotion_data = commerce_promotion_find_by_code($code);
  } elseif ($promotion_id) {
    $promotion_data = commerce_promotion_load($promotion_id);
  }

  if (isset($promotion_data)) {
    $promotion = commerce_promotion_get_balalaika_promotion($promotion_data);
    $subject = commerce_promotion_get_subject($order, $promotion_data);
    $promotion->apply($subject);
  }
}

function commerce_promotion_get_balalaika_promotion($promotion_data) {
  $builder = commerce_promotion_get_builder();
  return $builder->build($promotion_data);
}

function commerce_promotion_get_subject($order, $promotion_data) {
  module_load_include('inc', 'commerce_promotion', 'includes/commerce_promotion.subject');
  return new CommercePromotionSubject($order, $promotion_data);
}

/**
 * Show a table with the promotion added.
 */
function commerce_promotion_view_promotion($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $header = array(
    t('Code'), array('data' => t('Name'), 'colspan' => 2)
  );

  $promotions = $order_wrapper->field_commerce_promotions->value();
  if ($promotions) {
    $promotion_id = $promotions[0]->commerce_promotion_id;

    $rows = array();
    $rows[] = array(
      $order_wrapper->field_commerce_promotion_code->value(),
      commerce_promotion_display_action($promotion_id),
      commerce_promotion_get_remove_link($order->order_id, $promotion_id),
    );

    return theme('table', array('header' => $header, 'rows' => $rows));
  }

  return '';
}

/**
 * Display the action name for the promotion.
 */
function commerce_promotion_display_action($promotion_id) {
  $actions = commerce_promotion_load_actions($promotion_id);
  foreach ($actions as $key => $options) {
    switch ($key) {
      case 'discount_fixed_amount':
        return commerce_currency_format($options['argument'], commerce_default_currency()) . ' ' . t('off order');

      case 'discount_percentage':
        return $options['argument'] . '% ' . t('off order');

      case 'free_shipping':
        return t('Free shipping');
    }
  }

  return 'N/A';
}

function commerce_promotion_get_remove_link($order_id, $promotion_id) {
  // If there's an ajax form in the page, get the right destination url.
  if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH'] == 'XMLHttpRequest')  {
    $dest = str_replace($GLOBALS['base_url'] . '/', '', $_SERVER['HTTP_REFERER']);
  }
  else {
    $dest = current_path();
  }

  return l(
      t('Remove'),
      'commerce/promotions/order/remove/' . $promotion_id . '/' . $order_id,
      array(
        'query' => array('destination' => $dest, 'token' => drupal_get_token('commerce_coupon_remove_checkout:' . $promotion_id . ':' . $order_id))
      )
  );
}

function commerce_promotion_delete($promotion_id) {
  $deleted = db_delete('commerce_promotion')->condition('commerce_promotion_id', $promotion_id)->execute();
  db_delete('commerce_promotion_codes')->condition('commerce_promotion_id', $promotion_id)->execute();
  db_delete('commerce_promotion_actions')->condition('commerce_promotion_id', $promotion_id)->execute();
  db_delete('commerce_promotion_rules')->condition('commerce_promotion_id', $promotion_id)->execute();

  return $deleted;
}